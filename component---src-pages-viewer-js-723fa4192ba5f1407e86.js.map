{"version":3,"file":"component---src-pages-viewer-js-723fa4192ba5f1407e86.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/pages/viewer.js"],"sourcesContent":["import * as React from \"react\"\n// import { Link } from \"gatsby\"\n// import { StaticImage } from \"gatsby-plugin-image\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { Helmet } from \"react-helmet\"\nimport { Stage, StructureComponent } from \"react-ngl\"\nimport { Autocomplete, Checkbox, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField } from \"@mui/material\"\n// import finalData from '../database/5000_final.json'\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { navigate } from \"gatsby\"\nimport { useEffect} from \"react\";\nimport config from \"../service/fireconf\"\n// import MathJax from \"react-mathjax\";\nimport { getDownloadURL, getStorage, ref } from \"firebase/storage\";\n\n\n\n\nexport default function IndexPage(){\n  function ObtainJSON(){\n    if(typeof window !== 'undefined'){\n      const storage = getStorage();\n      getDownloadURL(ref(storage, \"PLAS-5k/database/plas5k.json\")).then((url)=>{\n        fetch(url).then((response)=>response.json()).then((responseJSON)=>{\n          setFinalData(responseJSON); \n          // console.log(responseJSON[0])\n        });\n      }).catch((error)=>{\n        alert(\"Error in obtainint JSON\");\n      })\n    }\n  }\n\n\n  useEffect(()=>{\n    if(typeof window !== 'undefined'){\n        const app =initializeApp(config);\n        const auth = getAuth(app);\n        onAuthStateChanged(auth, (user)=>{\n            if(!user){\n                navigate(\"/auth\")\n            }else{\n                // console.log(user.email);\n                ObtainJSON();\n            }\n        })\n    }\n})\n  const reprList = React.useMemo(() => ({\n    'ball+stick': [{\n      type: 'ball+stick',\n      param:{\n        color:'bfactor'\n      }\n    }],\n    cartoon: [{\n      type: 'cartoon',\n      param:{\n        color:'atomindex'\n      }\n    }],\n    'ribbon and line': [{\n      type: 'ribbon',\n      param: {\n        color: 'atomindex'\n      }\n    }, {\n      type: 'line',\n      param: {\n        color: 'element'\n      }\n    }],\n    spacefill: [{\n      type: 'spacefill',\n      param: {\n        color: 'element'\n      }\n    }],\n    surface: [{\n      type: 'surface',\n      param: {\n        color: 'element'\n      }\n    }]\n  }), []);\n  const cameraState = React.useMemo(()=>({\n    Reset:{},\n  }),[])\n\n  const [inputValue, setInputValue] = React.useState('');\n  const [index, setIndex] = React.useState('');\n  const [receptorState, setReceptorStae]= React.useState(true);\n  const [ligandState, setLigandState]= React.useState(true);\n  const [pdburl,setPdburl] = React.useState(\"\");\n  const [finalData,setFinalData] = React.useState([]);\n\n  function PdbRequest(newInputValue){\n    if (newInputValue.length == 4 && newInputValue.length !==null){\n      if(typeof window !== 'undefined'){\n        const storage = getStorage();\n        getDownloadURL(ref(storage, \"PLAS-5k/pdb/\"+inputValue+\".pdb\")).then((url)=>{\n          console.log(url)\n          setPdburl(url);\n        }).catch((error)=>{\n          alert(\"Error\",error.message);\n        })\n      }\n      setInputValue(newInputValue);\n      setIndex(finalData.findIndex(obj => obj.pdbid === newInputValue));\n      console.log(index);\n    }\n  }\n\n  return(\n    <Layout>\n    <Seo title=\"Home\" />\n    <Helmet>\n      {/* <script src={withPrefix('ngl.js')} type=\"text/javascript\"/> */}\n    </Helmet>\n    <div style={{}}>\n    <Autocomplete\n      style={{paddingTop: '2rem'}}\n      freeSolo\n      id=\"pdbid\"\n      options={finalData.map((option)=>option.pdbid)}\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} label=\"PDB ID\" sx={{\n        '& .MuiInputBase-root':{\n          color: 'white',\n          borderColor: '#1C1D26',\n          justifyContent: 'center',\n        },\n        '& .MuiInput-root':{\n          border: 1,\n          color:'white',\n          borderColor: '#1C1D26'\n        },\n        '& MuiInputBase-input':{\n          color: 'white',\n        },\n        '& .MuiInputLabel-root':{\n          color:'white',\n        },\n        // '& ..MuiFormControl-root':{\n        //   borderColor: '#1C1D26'\n        // }\n      }}/>}\n      onChange={(event,newInputValue)=>PdbRequest(newInputValue)}\n      // sx={{\n      //   '& .MuiAutocomplete-input':{\n      //     backgroundColor:\"white\"\n      //   }\n      // }}\n    />\n    </div>\n    {/* <Stage width=\"600px\" height=\"600px\" cameraState={cameraState}>\n      <Component path={\"/pdb/\"+inputValue+\".pdb\"} reprList={reprList}/>\n    </Stage> */}\n    {\n      inputValue !== '' \n        ? <div id=\"main\" className=\"wrapper style1\">\n          <Grid container spacing={4} direction=\"row\">\n            <Grid item>\n              <Stage width=\"600px\" height=\"600px\" cameraState={cameraState}>\n                <StructureComponent path={pdburl} reprList={reprList['ball+stick']} selection={ligandState ? 'Ligand' : 'not all'}/>\n                <StructureComponent path={pdburl} reprList={reprList['cartoon']} selection={receptorState ? 'protein' : 'not all'}/>\n              </Stage>\n            </Grid>\n            <Grid item>\n              <Grid container direction=\"column\">\n                <Grid item>\n                  <h5>Receptor <Checkbox defaultChecked onChange={()=>{setReceptorStae(!receptorState)}}/></h5>\n                </Grid>\n                <Grid item>\n                  <h5>Ligand <Checkbox defaultChecked onChange={()=>{setLigandState(!ligandState)}}/></h5>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <TableContainer component={Paper}>\n                <Table>\n                  <TableHead>\n                    <TableCell align=\"left\">{parseFloat(finalData[index]['pdbid']).toFixed(2)}</TableCell>\n                    <TableCell align=\"right\">Energy components(kcal/mol)</TableCell>\n                  </TableHead>\n                  <TableBody>\n                    {/* <TableRow>\n                      <TableCell align=\"left\">Ligand RMSD</TableCell>\n                      <TableCell align=\"right\">{finalData[index]['LigandRmsdMean']} ({finalData[index]['LigandRmsdSd']})</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell align=\"left\">Protein RMSD</TableCell>\n                      <TableCell align=\"right\">{finalData[index]['ProteinRmsdMean']} ({finalData[index]['ProteinRmsdSd']})</TableCell>\n                    </TableRow> */}\n                    <TableRow>\n                      <TableCell align=\"left\">Binding Affinity</TableCell>\n                      <TableCell align=\"right\">{parseFloat(finalData[index]['binding_affinity']).toFixed(2)} </TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell align=\"left\">van der Walls Interaction</TableCell>\n                      <TableCell align=\"right\">{parseFloat(finalData[index]['vdW']).toFixed(2)}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell align=\"left\">Electrostatic Interaction Energy</TableCell>\n                      <TableCell align=\"right\">{parseFloat(finalData[index]['electrostatic']).toFixed(2)}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell align=\"left\">Polar Solvational Energy</TableCell>\n                      <TableCell align=\"right\">{parseFloat(finalData[index]['polar_solvation']).toFixed(2)} </TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell align=\"left\">Non-Polar Solvational Energy</TableCell>\n                      <TableCell align=\"right\">{parseFloat(finalData[index]['non_polar_solvation']).toFixed(2)} </TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Grid>\n          </Grid>\n          {/* <Grid container spacing=\"auto\" direction=\"column\">\n            <Grid item xs={2}>\n              <h4><b>Binding Affinity:</b> {finalData[index]['di4_DELTA TOTAL_mean']}</h4>\n            </Grid>\n            <Grid item xs={2}>\n              <h4><b>van der Waals Interaction Energy:</b> {finalData[index]['VDW']}</h4>\n            </Grid>\n            <Grid item xs=\"auto\">\n              <h4><b>Electrostatic Interaction Energy</b> {finalData[index]['di4_EEL_mean']}</h4>\n            </Grid>\n            <Grid>\n              <h4><b>Non-Polar Interaction Energy</b> {finalData[index]['di4_EPB_mean']}</h4>\n            </Grid>\n          </Grid> */}\n          </div>\n        : <p></p>\n    }\n  </Layout>\n  );\n}"],"names":["IndexPage","useEffect","window","app","initializeApp","config","auth","getAuth","onAuthStateChanged","user","storage","getStorage","getDownloadURL","ref","then","url","fetch","response","json","responseJSON","setFinalData","catch","error","alert","ObtainJSON","navigate","reprList","React","type","param","color","cartoon","spacefill","surface","cameraState","Reset","inputValue","setInputValue","index","setIndex","receptorState","setReceptorStae","ligandState","setLigandState","pdburl","setPdburl","finalData","title","style","paddingTop","freeSolo","id","options","map","option","pdbid","sx","width","renderInput","params","label","borderColor","justifyContent","border","onChange","event","newInputValue","length","console","log","message","findIndex","obj","PdbRequest","className","container","spacing","direction","item","Stage","height","StructureComponent","path","selection","defaultChecked","component","Paper","align","parseFloat","toFixed"],"sourceRoot":""}